local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local AimSmoothness = 1 -- Adjust this value for smoother or snappier aim

local target
local aiming = false

-- Create the FOV circle
local fovRadius = 100 -- Adjust the radius to your preference
local fovCircle = Drawing.new("Circle")
fovCircle.Radius = fovRadius
fovCircle.Thickness = 1
fovCircle.Color = Color3.fromRGB(255, 0, 0) -- Red color
fovCircle.NumSides = 100
fovCircle.Filled = false
fovCircle.Visible = false

-- Function to check if a position is within the FOV circle
local function isInFOV(screenPosition)
    local fovCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    local distance = (screenPosition - fovCenter).magnitude
    return distance <= fovRadius
end

-- Function to predict the future position of a player
local function predictPosition(player, time)
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return nil
    end
    
    local humanoidRootPart = character.HumanoidRootPart
    local velocity = humanoidRootPart.Velocity
    local currentPosition = humanoidRootPart.Position

    -- Predict future position with a focus on shorter prediction times for pistols
    return currentPosition + velocity * time
end

-- Function to get the best prediction time for fast-paced weapons
local function getBestPredictionTime(player)
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return 0.1
    end
    
    local velocity = character.HumanoidRootPart.Velocity
    local speed = velocity.magnitude

    -- Shorter prediction time for faster aiming
    return math.clamp(speed / 50, 0.05, 0.1) -- Adjust prediction time for pistols
end

-- Function to find the best target to lock onto
local function getBestTarget()
    local bestTarget = nil
    local bestHitChance = 0
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local predictionTime = getBestPredictionTime(player)
            local predictedPosition = predictPosition(player, predictionTime)
            local screenPosition, onScreen = Camera:WorldToScreenPoint(predictedPosition)
            
            if onScreen and isInFOV(Vector2.new(screenPosition.X, screenPosition.Y)) then
                -- Calculate hit chance (simplified example)
                local hitChance = 1 / (predictedPosition - LocalPlayer.Character.HumanoidRootPart.Position).magnitude
                
                if hitChance > bestHitChance then
                    bestHitChance = hitChance
                    bestTarget = player
                end
            end
        end
    end
    return bestTarget
end

-- Main camera locking function
local function cameraLock()
    if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then
        return
    end

    local predictionTime = getBestPredictionTime(target)
    local targetPosition = predictPosition(target, predictionTime)
    local cameraPosition = Camera.CFrame.p
    local direction = (targetPosition - cameraPosition).unit

    -- Smoothly adjust the camera towards the target
    local targetCFrame = CFrame.new(cameraPosition, cameraPosition + direction)
    Camera.CFrame = Camera.CFrame:Lerp(targetCFrame, AimSmoothness)
end

-- Toggle function for aim when holding down 'E'
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.E then -- Change 'E' to your preferred key
        aiming = true
        fovCircle.Visible = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.E then -- Change 'E' to your preferred key
        aiming = false
        fovCircle.Visible = false
    end
end)

-- Update loop for camera locking and FOV circle
RunService.RenderStepped:Connect(function()
    if aiming then
        target = getBestTarget()
        if target then
            cameraLock()
        end
    end
    
    -- Update the FOV circle position
    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    fovCircle.Position = screenCenter
end)
